import numpy as np

from MathProtEnergyProcAug.DatasGenerate import GenerateRandomDatasInDiapasons

import unittest


# Модульные тесты
class TestGenerateRandomDatasInDiapasons(unittest.TestCase):
    def setUp(self):
        # Выполнить настройку тестов (если необходимо)
        pass

    def tearDown(self):
        # Выполнить завершающие действия (если необходимо)
        pass

    # Модульные тесты
    def testGenerateRandomDatasInDiapasons1(self):
        # Исходные данные
        minValues = [[1.1, 2.2, 5.5, 7.7],
                     [6.3, 2.3, 4.5, 5.5],
                     [2.7, 2.1, 3.3, 9.3],
                     [1.1, 5.4, 2.8, 1.1],
                     [7.8, 6.9, 1.2, 2.3]]
        maxValues = [[4.1, 3.2, 6.5, 9.7],
                     [8.3, 4.3, 8.5, 6.5],
                     [6.7, 5.1, 6.3, 9.7],
                     [2.1, 7.4, 5.8, 4.1],
                     [8.8, 7.9, 4.2, 6.3]]
        nPoints = [5, 10, 7, 3, 2]

        # Преобразованные матрицы
        minValuesAll = [[1.1, 2.2, 5.5, 7.7],
                        [1.1, 2.2, 5.5, 7.7],
                        [1.1, 2.2, 5.5, 7.7],
                        [1.1, 2.2, 5.5, 7.7],
                        [1.1, 2.2, 5.5, 7.7],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [6.3, 2.3, 4.5, 5.5],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [2.7, 2.1, 3.3, 9.3],
                        [1.1, 5.4, 2.8, 1.1],
                        [1.1, 5.4, 2.8, 1.1],
                        [1.1, 5.4, 2.8, 1.1],
                        [7.8, 6.9, 1.2, 2.3],
                        [7.8, 6.9, 1.2, 2.3]]
        maxValuesAll = [[4.1, 3.2, 6.5, 9.7],
                        [4.1, 3.2, 6.5, 9.7],
                        [4.1, 3.2, 6.5, 9.7],
                        [4.1, 3.2, 6.5, 9.7],
                        [4.1, 3.2, 6.5, 9.7],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [8.3, 4.3, 8.5, 6.5],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [6.7, 5.1, 6.3, 9.7],
                        [2.1, 7.4, 5.8, 4.1],
                        [2.1, 7.4, 5.8, 4.1],
                        [2.1, 7.4, 5.8, 4.1],
                        [8.8, 7.9, 4.2, 6.3],
                        [8.8, 7.9, 4.2, 6.3]]

        # Генерируем случайные данные
        rndDatas = GenerateRandomDatasInDiapasons(minValues,  # Минимальные значения величин
                                                  maxValues,  # Максимальные значения величин
                                                  nPoints  # Числа точек в соответствующих диапазонах
                                                  )

        # Проверяем значения
        self.assertTrue(np.all(rndDatas < maxValuesAll))
        self.assertTrue(np.all(rndDatas >= minValuesAll))

    def testGenerateRandomDatasInDiapasons2(self):
        # Исходные данные
        minValues = [[1.1, 1.2, 4.5],
                     [5.3, 1.3, 3.5],
                     [1.7, 1.1, 1.3],
                     [2.1, 3.4, 1.8],
                     [4.8, 2.9, 0.2]]
        maxValues = [[3.1, 3.2, 6.5],
                     [8.3, 2.3, 8.5],
                     [6.7, 5.1, 5.3],
                     [2.3, 7.4, 5.8],
                     [9.8, 7.9, 7.2]]
        nPoints = [6, 14, 5, 6, 1]

        # Преобразованные матрицы
        minValuesAll = [[1.1, 1.2, 4.5],
                        [1.1, 1.2, 4.5],
                        [1.1, 1.2, 4.5],
                        [1.1, 1.2, 4.5],
                        [1.1, 1.2, 4.5],
                        [1.1, 1.2, 4.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [5.3, 1.3, 3.5],
                        [1.7, 1.1, 1.3],
                        [1.7, 1.1, 1.3],
                        [1.7, 1.1, 1.3],
                        [1.7, 1.1, 1.3],
                        [1.7, 1.1, 1.3],
                        [2.1, 3.4, 1.8],
                        [2.1, 3.4, 1.8],
                        [2.1, 3.4, 1.8],
                        [2.1, 3.4, 1.8],
                        [2.1, 3.4, 1.8],
                        [2.1, 3.4, 1.8],
                        [4.8, 2.9, 0.2]]
        maxValuesAll = [[3.1, 3.2, 6.5],
                        [3.1, 3.2, 6.5],
                        [3.1, 3.2, 6.5],
                        [3.1, 3.2, 6.5],
                        [3.1, 3.2, 6.5],
                        [3.1, 3.2, 6.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [8.3, 2.3, 8.5],
                        [6.7, 5.1, 5.3],
                        [6.7, 5.1, 5.3],
                        [6.7, 5.1, 5.3],
                        [6.7, 5.1, 5.3],
                        [6.7, 5.1, 5.3],
                        [2.3, 7.4, 5.8],
                        [2.3, 7.4, 5.8],
                        [2.3, 7.4, 5.8],
                        [2.3, 7.4, 5.8],
                        [2.3, 7.4, 5.8],
                        [2.3, 7.4, 5.8],
                        [9.8, 7.9, 7.2]]

        # Генерируем случайные данные
        rndDatas = GenerateRandomDatasInDiapasons(minValues,  # Минимальные значения величин
                                                  maxValues,  # Максимальные значения величин
                                                  nPoints  # Числа точек в соответствующих диапазонах
                                                  )

        # Проверяем значения
        self.assertTrue(np.all(rndDatas < maxValuesAll))
        self.assertTrue(np.all(rndDatas >= minValuesAll))

    def testGenerateRandomDatasInDiapasons3(self):
        # Исходные данные
        minValues = [[3.1, 2.2, 5.5, 7.7, 10.1],
                     [5.1, 2.3, 4.5, 4.5, 11.3],
                     [3.5, 2.1, 3.3, 6.3, 13.5]]
        maxValues = [[4.7, 3.2, 6.5, 8.7, 14.6],
                     [9.3, 4.3, 8.5, 7.5, 20.1],
                     [7.7, 5.1, 6.3, 8.7, 27.3]]
        nPoints = [3, 2, 5]

        # Преобразованные матрицы
        minValuesAll = [[3.1, 2.2, 5.5, 7.7, 10.1],
                        [3.1, 2.2, 5.5, 7.7, 10.1],
                        [3.1, 2.2, 5.5, 7.7, 10.1],
                        [5.1, 2.3, 4.5, 4.5, 11.3],
                        [5.1, 2.3, 4.5, 4.5, 11.3],
                        [3.5, 2.1, 3.3, 6.3, 13.5],
                        [3.5, 2.1, 3.3, 6.3, 13.5],
                        [3.5, 2.1, 3.3, 6.3, 13.5],
                        [3.5, 2.1, 3.3, 6.3, 13.5],
                        [3.5, 2.1, 3.3, 6.3, 13.5]]
        maxValuesAll = [[4.7, 3.2, 6.5, 8.7, 14.6],
                        [4.7, 3.2, 6.5, 8.7, 14.6],
                        [4.7, 3.2, 6.5, 8.7, 14.6],
                        [9.3, 4.3, 8.5, 7.5, 20.1],
                        [9.3, 4.3, 8.5, 7.5, 20.1],
                        [7.7, 5.1, 6.3, 8.7, 27.3],
                        [7.7, 5.1, 6.3, 8.7, 27.3],
                        [7.7, 5.1, 6.3, 8.7, 27.3],
                        [7.7, 5.1, 6.3, 8.7, 27.3],
                        [7.7, 5.1, 6.3, 8.7, 27.3]]

        # Генерируем случайные данные
        rndDatas = GenerateRandomDatasInDiapasons(minValues,  # Минимальные значения величин
                                                  maxValues,  # Максимальные значения величин
                                                  nPoints  # Числа точек в соответствующих диапазонах
                                                  )

        # Проверяем значения
        self.assertTrue(np.all(rndDatas < maxValuesAll))
        self.assertTrue(np.all(rndDatas >= minValuesAll))


# Запустить тестирование
if __name__ == "__main__":
    unittest.main()
